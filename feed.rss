<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Swift Dev Diary</title><description>New diary of an old developer</description><link>https://shawnkc.github.io</link><language>en</language><lastBuildDate>Tue, 5 Nov 2024 08:56:29 -0600</lastBuildDate><pubDate>Tue, 5 Nov 2024 08:56:29 -0600</pubDate><ttl>250</ttl><atom:link href="https://shawnkc.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://shawnkc.github.io/posts/2024-11-05-http-methods</guid><title>What are the HTTP Methods?</title><description>A quick overview of the various HTTP methods and their usage.</description><link>https://shawnkc.github.io/posts/2024-11-05-http-methods</link><pubDate>Tue, 5 Nov 2024 08:46:00 -0600</pubDate><content:encoded><![CDATA[<h1>What are the HTTP Methods?</h1><p>There are 5 main HTTP methods that are used to perform all CRUD (create, read, update, delete) operations on the backend.</p><ul><li><code>GET</code> - retrieves a target resource, usually with query parameters</li><li><code>POST</code> - creates a new resource, usually with a request body</li><li><code>PUT</code> - replaces a target resource with a new one</li><li><code>PATCH</code> - updates a target resource</li><li><code>DELETE</code> - deletes a target resource</li></ul><p>I've used all but PUT in production code. Most APIs I've worked with are either GET or POST-based APIs as replace/update operations can be done via POST methods.</p><p>Other HTTP methods I've never used before:</p><ul><li><code>HEAD</code> - asks for a resource like <code>GET</code>, but without a response body</li><li><code>CONNECT</code> - establishes a tunnel to the server identified by the target resource</li><li><code>OPTIONS</code> - describes the communication options for the target resource</li><li><code>TRACE</code> - performs a message loop-back test along the path to the target resource</li></ul><p>From: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">MDN web docs</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://shawnkc.github.io/posts/2020-03-23-first-post</guid><title>Using Publish and Github to Make a Website</title><description>We take a dive into using Publish and Github to setup a website and get our first blog post online!</description><link>https://shawnkc.github.io/posts/2020-03-23-first-post</link><pubDate>Mon, 23 Mar 2020 11:14:00 -0500</pubDate><content:encoded><![CDATA[<h1>Using Publish and Github to Make a Website</h1><p>Used https://github.com/JohnSundell/Publish to generate a website.</p><p>Not sure exactly how to use it yet but thought I'd just go ahead and make a 1% improvement.</p><p>More things yet to do:</p><ul><li>Figure out how to automatically deploy to github</li><li>Use code blocks</li><li>Define some colors on custom theme</li></ul><p>Thank you John Sundell and github for making this so easy!</p><p>Publish use:</p><ul><li><a href="https://github.com/JohnSundell/Ink">Ink</a> (Markdown parser)</li><li><a href="https://github.com/JohnSundell/Plot">Plot</a> (DSL for writing type-safe HTML in Swift)</li><li><a href="https://github.com/JohnSundell/Publish">Publish</a> (Static site-generator)</li></ul><p>Follow the instructions from the <a href="https://github.com/JohnSundell/Publish">Publish</a> github's README on how to get and setup your first website.</p><h2>Deploying to your github pages</h2><p>Used all the defaults from the new site published:</p><pre><code><span class="keyword">try</span> <span class="type">Websitedef</span>().<span class="call">publish</span>(
    withTheme: .<span class="dotAccess">foundation</span>,
    deployedUsing: .<span class="call">gitHub</span>(<span class="string">"shawnkc/shawnkc.github.io"</span>)
)
</code></pre><h2>New sections</h2><p>To create sections, open up <strong>main.swift</strong>, and within the <code>SectionID</code> enum, add all the sections you want.</p><pre><code><span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
	<span class="comment">// Add the sections that you want your website to contain here:</span>
	<span class="keyword">case</span> posts
	<span class="keyword">case</span> about
}
</code></pre><figure>
    <img class="medium-image" src="../../images/2020-03-23-website-1.png" alt="" />
</figure><p>This shows the posts and about sections on the webpage.</p><p>To add a new static page, add a new item in the section ID enum and then create a single markdown file in the Content folder. For instance, to add a section for <strong>Links</strong>:</p><pre><code><span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
	<span class="comment">// Add the sections that you want your website to contain here:</span>
	<span class="keyword">case</span> posts
	<span class="keyword">case</span> about
	<span class="keyword">case</span> links
}
</code></pre><figure>
    <img class="medium-image" src="../../images/2020-03-23-website-2.png" alt="" />
</figure><h2>Generation</h2><pre><code>$ website-def&gt; publish generate
</code></pre><p>Check the README.md for more details on the structure, generation and testing of the website.</p>]]></content:encoded></item></channel></rss>